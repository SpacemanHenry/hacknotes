function Invoke-Spy {
    <#
    .Synopsis
    Monitor processes via WMI event subscription. All arguments are optional.
    .Parameter Identifier
    Custom name for event subscription
    .Parameter ExcludeSessions
    Array of session IDs to ignore
    .Parameter ExcludeNames
    Array of process names to ignore
    .Example
    PS> Invoke-Spy -Identifier "subscription1"
    .Example
    PS> Invoke-Spy -ExcludeSessions (0,1)
    .Example
    PS> Invoke-Spy -ExcludeNames ("svchost.exe","conhost.exe")
    #>
    param (
        [Parameter(HelpMessage="Name of event subscription")]
        [string]
        $Identifier,
        [Parameter(HelpMessage="Array of session IDs to ignore")]
        [int[]]
        $ExcludeSessions,
        [Parameter(HelpMessage="Array of process names to ignore")]
        [string[]]
        $ExcludeNames
    )

    try {
        if (!$PSBoundParameters.ContainsKey("Identifier")) {
            $Identifier = (Get-Random -InputObject (10000..99999) -Count 1).ToString()
        }

        $query = "select * from __instancecreationevent within 1 where targetinstance isa 'win32_process'"
        Register-CimIndicationEvent -Query $query -SourceIdentifier $Identifier
        for (;;) {
            $event = Wait-Event -SourceIdentifier $Identifier
            $targetinstance = $event.SourceEventArgs.NewEvent.TargetInstance

            if (([int]$targetinstance.SessionId -notin $ExcludeSessions) -and ([string]$targetinstance.ProcessName -notin $ExcludeNames)) {
                Select-Object -InputObject $targetinstance -Property ProcessName,ProcessId,SessionId,CSName,Path,CommandLine,ExecutablePath
                [Console]::Out.Flush()
            }

            Remove-Event -EventIdentifier $event.EventIdentifier
        }
    } finally {
        Unregister-Event -SourceIdentifier $Identifier
    }
}
